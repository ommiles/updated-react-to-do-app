{"version":3,"sources":["Task.js","TaskForm.js","App.js","reportWebVitals.js","index.js"],"names":["Task","task","toggleComplete","updateTask","deleteTask","inputRef","useRef","useState","isEditing","setIsEditing","currentTask","setCurrentTask","useEffect","current","focus","toggleForm","className","id","onSubmit","e","preventDefault","onChange","target","value","type","ref","onClick","completed","icon","faPen","faTrash","TaskForm","createTask","useReducer","state","newState","userInput","setUserInput","newTask","uuidv4","htmlFor","name","placeholder","App","taskList","setTaskList","updatedTasks","map","updatedTask","updatedTaskList","filter","readTasks","style","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65799e4d.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen, faTrash } from '@fortawesome/free-solid-svg-icons';\n\nexport const Task = ({ task, toggleComplete, updateTask, deleteTask }) => {\n  const inputRef = useRef(null);\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTask, setCurrentTask] = useState(task.task);\n\n  useEffect(() => {\n    if (isEditing) {\n      inputRef.current.focus();\n    }\n  }, [isEditing]);\n\n  const handleChange = e => {\n    setCurrentTask(e.target.value);\n  };\n\n  const toggleForm = () => {\n    setIsEditing(!isEditing);\n  };\n\n  const toggleCompleted = e => {\n    toggleComplete(e.target.id);\n  };\n\n  const handleUpdate = e => {\n    e.preventDefault();\n    updateTask(task.id, currentTask);\n    toggleForm();\n  };\n\n  const handleDelete = e => {\n    deleteTask(e.target.id);\n  };\n\n  let result;\n\n  if (isEditing) {\n    result = (\n      <div className='task'>\n        <form id='Task-edit-form' onSubmit={handleUpdate}>\n          <input\n            onChange={handleChange}\n            value={currentTask}\n            type='text'\n            ref={inputRef}\n          />\n          <button>Save</button>\n        </form>\n      </div>\n    );\n  } else {\n    result = (\n      <div className='task'>\n        <li\n          id={task.id}\n          onClick={toggleCompleted}\n          className={task.completed ? 'todo-task completed' : 'todo-task'}\n        >\n          {task.task}\n        </li>\n        <div id='Task-buttons' className={task.completed ? 'completed' : null}>\n          <button onClick={toggleForm}>\n            <FontAwesomeIcon icon={faPen} />\n          </button>\n          <button id={task.id} onClick={handleDelete}>\n            <FontAwesomeIcon icon={faTrash} />\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return result;\n};\n","import React, { useReducer } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const TaskForm = ({ createTask }) => {\n  const [userInput, setUserInput] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      task: '',\n    }\n  );\n\n  const handleChange = e => {\n    setUserInput({ [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newTask = { id: uuidv4(), task: userInput.task, completed: false };\n    createTask(newTask);\n    setUserInput({ task: '' });\n  };\n\n  return (\n    <form className='new-task-form' onSubmit={handleSubmit}>\n      <label className='Test-Pitch-Regular' htmlFor='task'>\n        Add a New Task:\n      </label>\n      <input\n        value={userInput.task}\n        onChange={handleChange}\n        id='task'\n        type='text'\n        name='task'\n        placeholder='New To-do'\n      />\n      <button>Add Todo</button>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Task } from './Task';\nimport { TaskForm } from './TaskForm';\nimport './css/App.css';\nimport './css/Fonts.css';\nimport './css/Task.css';\nimport './css/TaskForm.css';\n\nexport const App = () => {\n  const [taskList, setTaskList] = useState([\n    { id: uuidv4(), task: 'Pick up dry cleaning', completed: false },\n    { id: uuidv4(), task: 'Hike Mt. Kilimanjaro', completed: true },\n    { id: uuidv4(), task: 'Dog groomer', completed: false },\n    { id: uuidv4(), task: 'Get an undercut', completed: true },\n    { id: uuidv4(), task: 'Visit dentist', completed: false },\n    { id: uuidv4(), task: 'Get orchids at florist', completed: true },\n    { id: uuidv4(), task: 'Piano lesson', completed: false },\n  ]);\n\n  const toggleComplete = id => {\n    const updatedTasks = taskList.map(task => {\n      if (task.id === id) {\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTaskList(updatedTasks);\n  };\n\n  const createTask = newTask => {\n    setTaskList([...taskList, newTask]);\n  };\n\n  const updateTask = (id, updatedTask) => {\n    const updatedTaskList = taskList.map(task => {\n      if (task.id === id) {\n        return { ...task, task: updatedTask };\n      }\n      return task;\n    });\n    setTaskList(updatedTaskList);\n  };\n\n  const deleteTask = id => {\n    setTaskList(taskList.filter(task => task.id !== id));\n  };\n\n  const readTasks = taskList.map(task => (\n    <Task\n      key={task.id}\n      task={task}\n      toggleComplete={toggleComplete}\n      updateTask={updateTask}\n      deleteTask={deleteTask}\n    />\n  ));\n\n  return (\n    <div>\n      <main>\n        <header className='header Sohne-Breit' style={{ position: 'sticky' }}>\n          <h1 className='Test-Pitch-Regular' style={{}}>\n            To-do List <span>A simple React Todo List App</span>\n          </h1>\n        </header>\n        <div className='App Sohne-Breit' style={{ position: 'static' }}>\n          <ul>{readTasks}</ul>\n          <footer style={{ position: 'sticky' }}>\n            <TaskForm createTask={createTask} />\n          </footer>\n        </div>\n      </main>\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}